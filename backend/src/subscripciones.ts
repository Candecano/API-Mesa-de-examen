import { Router, Request, Response } from "express";
import NotificacionPushService from "./Servicios/NotificacionesPushObserver";
import { NotificacionService } from "./Servicios/NotificacionService";
import { PushNotificationStrategy } from "./Servicios/PushStrategyA";

const router = Router();

const estrategia = new PushNotificationStrategy();
const notificador = new NotificacionService(estrategia);

// üëâ Registrar nueva suscripci√≥n
router.post("/", (req: Request, res: Response): void => {
  const suscripcion = req.body;

  if (!suscripcion || !suscripcion.endpoint) {
    console.warn("‚ö†Ô∏è Suscripci√≥n inv√°lida recibida:", suscripcion);
    res.status(400).json({ message: "Suscripci√≥n inv√°lida" });
    return;
  }

  NotificacionPushService.agregarSuscripcion(suscripcion);
  console.log("‚úÖ Suscripci√≥n registrada:", suscripcion.endpoint);
  res.status(201).json({ message: "Suscripci√≥n registrada con √©xito" });
});

// üëâ Enviar notificaci√≥n manual
router.post("/notificar", async (req: Request, res: Response) => {
  const { profesor, materia, fecha, modalidad } = req.body;

  const payload = JSON.stringify({
    title: "üì¢ Notificaci√≥n manual",
    body: `Profesor: ${profesor}\nMateria: ${materia}\nFecha: ${fecha}\nModalidad: ${modalidad}`,
  });

  console.log("üì§ Enviando notificaci√≥n a profesor:", profesor);

  try {
    await notificador.enviarNotificacion("üì¢ Notificaci√≥n manual", payload);
    console.log("‚úÖ Notificaci√≥n enviada con √©xito.");
    res.status(200).json({ mensaje: "Notificaci√≥n enviada correctamente" });
  } catch (error: any) {
    console.error("‚ùå Error al enviar notificaci√≥n:", error?.message || error);
    res.status(500).json({ mensaje: "Fall√≥ el env√≠o de la notificaci√≥n" });
  }
});

export default router;
